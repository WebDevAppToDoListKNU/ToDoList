{"ast":null,"code":"var _jsxFileName = \"/Users/ldy/Code/React/\\u110B\\u1170\\u11B8\\u1100\\u1162\\u1107\\u1161\\u11AF\\u110B\\u1173\\u11BC\\u110B\\u116D\\u11BC/week15/TodoGPT/src/components/ToDoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { chat } from './openai';\nimport { useNavigate } from 'react-router-dom';\nimport FolderList from './FolderList';\nimport TodoList from './Todo';\nimport TodoEditor from './TodoEditor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ToDoList() {\n  _s();\n  const navigate = useNavigate();\n  const [logInUser, setLogInUser] = useState(null);\n  const [todos, setTodos] = useState({});\n  const [folders, setFolders] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [selectedFolder, setSelectedFolder] = useState(1);\n  const [editorOpen, setEditorOpen] = useState(false);\n  const [edit, setEdit] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"latest\");\n  const [filterDate, setFilterDate] = useState(\"\");\n  const loadData = async () => {\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (!user) {\n      alert(\"로그인 후 사용 가능합니다.\");\n      navigate(\"/login\");\n      return;\n    }\n    setLogInUser(user);\n    try {\n      const {\n        data: foldersData\n      } = await axios.get(\"/api/folders\", {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setFolders(foldersData);\n      const {\n        data: todosData\n      } = await axios.get(`/api/todos/${selectedFolder}`, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setTodos(todosData);\n    } catch (error) {\n      console.error(\"Error loading data:\", error);\n    }\n  };\n  const addFolder = async () => {\n    try {\n      await axios.post(\"/api/folders\", {\n        name: newFolderName\n      }, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      setNewFolderName(\"\");\n      loadData();\n    } catch (error) {\n      console.error(\"Error adding folder:\", error);\n    }\n  };\n  const onDeleteFolder = async folderId => {\n    if (folderId === 1) {\n      alert(\"기본 폴더는 삭제할 수 없습니다.\");\n      return;\n    }\n    try {\n      await axios.delete(`/api/folders/${folderId}`, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      loadData();\n    } catch (error) {\n      console.error(\"Error deleting folder:\", error);\n    }\n  };\n  const toggleFavorite = async (todoId, folderId) => {\n    try {\n      const existingFavorite = favorites.find(fav => fav.todoId === todoId && fav.folderId === folderId);\n      if (existingFavorite) {\n        await axios.delete(`/api/favorites/${existingFavorite.id}`, {\n          headers: {\n            Authorization: `Bearer ${logInUser.token}`\n          }\n        });\n      } else {\n        await axios.post(\"/api/favorites\", {\n          todoId,\n          folderId\n        }, {\n          headers: {\n            Authorization: `Bearer ${logInUser.token}`\n          }\n        });\n      }\n      loadData();\n    } catch (error) {\n      console.error(\"Error toggling favorite:\", error);\n    }\n  };\n  const onDelete = async todoId => {\n    try {\n      await axios.delete(`/api/todos/${todoId}`, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      loadData();\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n  const fetchSummary = async () => {\n    try {\n      const response = await chat(content);\n      setSummary(response.data.choices[0].message.content);\n    } catch (error) {\n      console.error(\"Error fetching summary:\", error);\n    }\n  };\n  const updateTodoContent = async () => {\n    try {\n      await axios.put(`/api/todos/${edit.id}`, {\n        content: summary\n      }, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      setSummary(\"\");\n      setEditorOpen(false);\n      loadData();\n    } catch (error) {\n      console.error(\"Error updating todo content:\", error);\n    }\n  };\n  const openEditor = todo => {\n    setEditorOpen(true);\n    setTitle(todo.title);\n    setContent(todo.content);\n    setEdit(todo);\n  };\n  const closeEditor = () => {\n    setEditorOpen(false);\n    setTitle(\"\");\n    setContent(\"\");\n    setEdit(null);\n    setSummary(\"\");\n  };\n  const onAddOrUpdate = async () => {\n    if (!title || !content) {\n      alert(\"제목과 내용을 입력해주세요.\");\n      return;\n    }\n    if (edit) {\n      await axios.put(`/api/todos/${edit.id}`, {\n        title,\n        content\n      }, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n    } else {\n      await axios.post(\"/api/todos\", {\n        title,\n        content,\n        folderId: selectedFolder\n      }, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n    }\n    closeEditor();\n    loadData();\n  };\n  const restoreTodo = async todoId => {\n    try {\n      await axios.put(`/api/todos/${todoId}/restore`, null, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      loadData();\n    } catch (error) {\n      console.error(\"Error restoring todo:\", error);\n    }\n  };\n  const onRealDelete = async todoId => {\n    try {\n      await axios.delete(`/api/todos/${todoId}/delete`, {\n        headers: {\n          Authorization: `Bearer ${logInUser.token}`\n        }\n      });\n      loadData();\n    } catch (error) {\n      console.error(\"Error permanently deleting todo:\", error);\n    }\n  };\n  useEffect(() => {\n    loadData();\n  }, [selectedFolder]);\n  const filteredTodos = todos.filter(todo => {\n    return todo.title.includes(query) || todo.content.includes(query);\n  }).sort((a, b) => sortOrder === \"latest\" ? new Date(b.date) - new Date(a.date) : new Date(a.date) - new Date(b.date));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(FolderList, {\n      folders: folders,\n      selectedFolder: selectedFolder,\n      setSelectedFolder: setSelectedFolder,\n      newFolderName: newFolderName,\n      setNewFolderName: setNewFolderName,\n      addFolder: addFolder,\n      onDeleteFolder: onDeleteFolder,\n      logInUser: logInUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      filteredTodos: filteredTodos,\n      openEditor: openEditor,\n      toggleFavorite: toggleFavorite,\n      onDelete: onDelete,\n      restoreTodo: restoreTodo,\n      onRealDelete: onRealDelete,\n      favorites: favorites,\n      selectedFolder: selectedFolder,\n      sortOrder: sortOrder,\n      setSortOrder: setSortOrder,\n      query: query,\n      setQuery: setQuery,\n      filterDate: filterDate,\n      setFilterDate: setFilterDate,\n      logInUser: logInUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TodoEditor, {\n      editorOpen: editorOpen,\n      closeEditor: closeEditor,\n      title: title,\n      setTitle: setTitle,\n      content: content,\n      setContent: setContent,\n      fetchSummary: fetchSummary,\n      summary: summary,\n      updateTodoContent: updateTodoContent,\n      onAddOrUpdate: onAddOrUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n}\n_s(ToDoList, \"irulTPXx+JRnAVaQqJt7F45JzPc=\", false, function () {\n  return [useNavigate];\n});\n_c = ToDoList;\nexport default ToDoList;\nvar _c;\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"names":["React","useState","useEffect","axios","chat","useNavigate","FolderList","TodoList","TodoEditor","jsxDEV","_jsxDEV","ToDoList","_s","navigate","logInUser","setLogInUser","todos","setTodos","folders","setFolders","favorites","setFavorites","selectedFolder","setSelectedFolder","editorOpen","setEditorOpen","edit","setEdit","title","setTitle","content","setContent","newFolderName","setNewFolderName","query","setQuery","summary","setSummary","sortOrder","setSortOrder","filterDate","setFilterDate","loadData","user","JSON","parse","localStorage","getItem","alert","data","foldersData","get","headers","Authorization","token","todosData","error","console","addFolder","post","name","onDeleteFolder","folderId","delete","toggleFavorite","todoId","existingFavorite","find","fav","id","onDelete","fetchSummary","response","choices","message","updateTodoContent","put","openEditor","todo","closeEditor","onAddOrUpdate","restoreTodo","onRealDelete","filteredTodos","filter","includes","sort","a","b","Date","date","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ldy/Code/React/웹개발응용/week15/TodoGPT/src/components/ToDoList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { chat } from './openai';\nimport { useNavigate } from 'react-router-dom';\nimport FolderList from './FolderList';\nimport TodoList from './Todo';\nimport TodoEditor from './TodoEditor';\n\nfunction ToDoList() {\n    const navigate = useNavigate();\n    const [logInUser, setLogInUser] = useState(null);\n    const [todos, setTodos] = useState({});\n    const [folders, setFolders] = useState([]);\n    const [favorites, setFavorites] = useState([]);\n    const [selectedFolder, setSelectedFolder] = useState(1);\n    const [editorOpen, setEditorOpen] = useState(false);\n    const [edit, setEdit] = useState(null);\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [newFolderName, setNewFolderName] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n    const [sortOrder, setSortOrder] = useState(\"latest\");\n    const [filterDate, setFilterDate] = useState(\"\");\n\n    const loadData = async () => {\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n        if (!user) {\n            alert(\"로그인 후 사용 가능합니다.\");\n            navigate(\"/login\");\n            return;\n        }\n        setLogInUser(user);\n\n        try {\n            const { data: foldersData } = await axios.get(\"/api/folders\", {\n                headers: { Authorization: `Bearer ${user.token}` },\n            });\n            setFolders(foldersData);\n            const { data: todosData } = await axios.get(`/api/todos/${selectedFolder}`, {\n                headers: { Authorization: `Bearer ${user.token}` },\n            });\n            setTodos(todosData);\n        } catch (error) {\n            console.error(\"Error loading data:\", error);\n        }\n    };\n\n    const addFolder = async () => {\n        try {\n            await axios.post(\"/api/folders\", { name: newFolderName }, {\n                headers: { Authorization: `Bearer ${logInUser.token}` },\n            });\n            setNewFolderName(\"\");\n            loadData();\n        } catch (error) {\n            console.error(\"Error adding folder:\", error);\n        }\n    };\n\n    const onDeleteFolder = async (folderId) => {\n        if (folderId === 1) {\n            alert(\"기본 폴더는 삭제할 수 없습니다.\");\n            return;\n        }\n        try {\n            await axios.delete(`/api/folders/${folderId}`, {\n                headers: { Authorization: `Bearer ${logInUser.token}` },\n            });\n            loadData();\n        } catch (error) {\n            console.error(\"Error deleting folder:\", error);\n        }\n    };\n\n    const toggleFavorite = async (todoId, folderId) => {\n        try {\n            const existingFavorite = favorites.find(\n                (fav) => fav.todoId === todoId && fav.folderId === folderId\n            );\n            if (existingFavorite) {\n                await axios.delete(`/api/favorites/${existingFavorite.id}`, {\n                    headers: { Authorization: `Bearer ${logInUser.token}` },\n                });\n            } else {\n                await axios.post(\"/api/favorites\", { todoId, folderId }, {\n                    headers: { Authorization: `Bearer ${logInUser.token}` },\n                });\n            }\n            loadData();\n        } catch (error) {\n            console.error(\"Error toggling favorite:\", error);\n        }\n    };\n\n    const onDelete = async (todoId) => {\n        try {\n            await axios.delete(`/api/todos/${todoId}`, {\n                headers: { Authorization: `Bearer ${logInUser.token}` },\n            });\n            loadData();\n        } catch (error) {\n            console.error(\"Error deleting todo:\", error);\n        }\n    };\n\n    const fetchSummary = async () => {\n        try {\n            const response = await chat(content);\n            setSummary(response.data.choices[0].message.content);\n        } catch (error) {\n            console.error(\"Error fetching summary:\", error);\n        }\n    };\n\n    const updateTodoContent = async () => {\n        try {\n            await axios.put(\n                `/api/todos/${edit.id}`,\n                { content: summary },\n                { headers: { Authorization: `Bearer ${logInUser.token}` } }\n            );\n            setSummary(\"\");\n            setEditorOpen(false);\n            loadData();\n        } catch (error) {\n            console.error(\"Error updating todo content:\", error);\n        }\n    };\n\n    const openEditor = (todo) => {\n        setEditorOpen(true);\n        setTitle(todo.title);\n        setContent(todo.content);\n        setEdit(todo);\n    };\n\n    const closeEditor = () => {\n        setEditorOpen(false);\n        setTitle(\"\");\n        setContent(\"\");\n        setEdit(null);\n        setSummary(\"\");\n    };\n\n    const onAddOrUpdate = async () => {\n        if (!title || !content) {\n            alert(\"제목과 내용을 입력해주세요.\");\n            return;\n        }\n        if (edit) {\n            await axios.put(\n                `/api/todos/${edit.id}`,\n                { title, content },\n                { headers: { Authorization: `Bearer ${logInUser.token}` } }\n            );\n        } else {\n            await axios.post(\n                \"/api/todos\",\n                { title, content, folderId: selectedFolder },\n                { headers: { Authorization: `Bearer ${logInUser.token}` } }\n            );\n        }\n        closeEditor();\n        loadData();\n    };\n\n    const restoreTodo = async (todoId) => {\n        try {\n            await axios.put(`/api/todos/${todoId}/restore`, null, {\n                headers: { Authorization: `Bearer ${logInUser.token}` },\n            });\n            loadData();\n        } catch (error) {\n            console.error(\"Error restoring todo:\", error);\n        }\n    };\n\n    const onRealDelete = async (todoId) => {\n        try {\n            await axios.delete(`/api/todos/${todoId}/delete`, {\n                headers: { Authorization: `Bearer ${logInUser.token}` },\n            });\n            loadData();\n        } catch (error) {\n            console.error(\"Error permanently deleting todo:\", error);\n        }\n    };\n\n    useEffect(() => {\n        loadData();\n    }, [selectedFolder]);\n\n    const filteredTodos = todos.filter((todo) => {\n        return (\n            todo.title.includes(query) ||\n            todo.content.includes(query)\n        );\n    }).sort((a, b) => sortOrder === \"latest\" ? new Date(b.date) - new Date(a.date) : new Date(a.date) - new Date(b.date));\n\n    return (\n        <div style={{ display: \"flex\" }}>\n            <FolderList\n                folders={folders}\n                selectedFolder={selectedFolder}\n                setSelectedFolder={setSelectedFolder}\n                newFolderName={newFolderName}\n                setNewFolderName={setNewFolderName}\n                addFolder={addFolder}\n                onDeleteFolder={onDeleteFolder}\n                logInUser={logInUser}\n            />\n            <TodoList\n                filteredTodos={filteredTodos}\n                openEditor={openEditor}\n                toggleFavorite={toggleFavorite}\n                onDelete={onDelete}\n                restoreTodo={restoreTodo}\n                onRealDelete={onRealDelete}\n                favorites={favorites}\n                selectedFolder={selectedFolder}\n                sortOrder={sortOrder}\n                setSortOrder={setSortOrder}\n                query={query}\n                setQuery={setQuery}\n                filterDate={filterDate}\n                setFilterDate={setFilterDate}\n                logInUser={logInUser}\n            />\n            <TodoEditor\n                editorOpen={editorOpen}\n                closeEditor={closeEditor}\n                title={title}\n                setTitle={setTitle}\n                content={content}\n                setContent={setContent}\n                fetchSummary={fetchSummary}\n                summary={summary}\n                updateTodoContent={updateTodoContent}\n                onAddOrUpdate={onAddOrUpdate}\n            />\n        </div>\n    );\n}\n\nexport default ToDoList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}