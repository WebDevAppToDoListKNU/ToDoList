{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = process.env.REACT_APP_OPENAPI_KEY2;\nconsole.log(API_KEY);\nconst chat = async (prompt, onMessage) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${API_KEY}`\n  };\n  const messages = [{\n    role: 'user',\n    content: prompt\n  }];\n  console.log(\"=>\", prompt);\n  axios.post(\"https://api.openai.com/v1/chat/completions\", {\n    model: \"gpt-3.5-turbo\",\n    temperature: 0.5,\n    messages: messages\n  }, {\n    headers,\n    timeout: 10000\n  }).then(response => {\n    console.log(response.data.choices[0].message.content);\n    onMessage(response.data.choices[0].message.content);\n  }).catch(err => {\n    console.log(err);\n    onMessage(err.message);\n  });\n};\nconst chatHistory = async (prompt, messages, onMessage) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${API_KEY}`\n  };\n  console.log(\"과거기역 : \", messages);\n  console.log(\"질의 : \", prompt);\n  const gg = [...messages, {\n    role: 'user',\n    content: prompt\n  }];\n  console.log(\"메시지 : \", gg);\n  axios.post(\"https://api.openai.com/v1/chat/completions\", {\n    model: \"gpt-3.5-turbo\",\n    temperature: 0.5,\n    messages: gg\n  }, {\n    headers,\n    timeout: 15000\n  }).then(response => {\n    console.log(\"응답 : \", response.data.choices[0].message.content);\n    onMessage(response.data.choices[0].message.content);\n  }).catch(err => {\n    console.log(err);\n    onMessage(err.message);\n  });\n};\nconst dalle = async (prompt, onMessage, n = 1, size = '256x256') => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${API_KEY}`\n  };\n  axios.post(\"https://api.openai.com/v1/images/generations\", {\n    prompt: prompt,\n    n: n,\n    size: size\n  }, {\n    headers,\n    timeout: 10000\n  }).then(response => {\n    console.log(response);\n    onMessage(response.data.data);\n  }).catch(console.log);\n};\nexport { chat, chatHistory, dalle };","map":{"version":3,"names":["axios","API_KEY","process","env","REACT_APP_OPENAPI_KEY2","console","log","chat","prompt","onMessage","headers","Authorization","messages","role","content","post","model","temperature","timeout","then","response","data","choices","message","catch","err","chatHistory","gg","dalle","n","size"],"sources":["/Users/ldy/Code/React/웹개발응용/week15/TodoList/src/openai.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst API_KEY = process.env.REACT_APP_OPENAPI_KEY2\r\nconsole.log(API_KEY)\r\nconst chat = async (prompt, onMessage) => {\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Bearer ${API_KEY}`,\r\n  }\r\n  const messages = [{ role: 'user', content: prompt }]\r\n\r\n  console.log(\"=>\", prompt)\r\n  axios.post(\r\n    \"https://api.openai.com/v1/chat/completions\",\r\n    {\r\n      model: \"gpt-3.5-turbo\",\r\n      temperature: 0.5,\r\n      messages: messages\r\n    }, { headers, timeout: 10000 }\r\n  ).then(response => {\r\n    console.log(response.data.choices[0].message.content)\r\n    onMessage(response.data.choices[0].message.content)\r\n  }).catch(err => { console.log(err); onMessage(err.message) })\r\n}\r\n\r\nconst chatHistory = async (prompt, messages, onMessage) => {\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Bearer ${API_KEY}`,\r\n  }\r\n  console.log(\"과거기역 : \", messages)\r\n  console.log(\"질의 : \", prompt)\r\n  const gg = [...messages, { role: 'user', content: prompt }]\r\n  console.log(\"메시지 : \", gg)\r\n\r\n  axios.post(\r\n    \"https://api.openai.com/v1/chat/completions\",\r\n    {\r\n      model: \"gpt-3.5-turbo\",\r\n      temperature: 0.5,\r\n      messages: gg\r\n    }, { headers, timeout: 15000 }\r\n  ).then(response => {\r\n    console.log(\"응답 : \", response.data.choices[0].message.content)\r\n    onMessage(response.data.choices[0].message.content)\r\n  }).catch(err => { console.log(err); onMessage(err.message) })\r\n}\r\n\r\n\r\n\r\nconst dalle = async (prompt, onMessage, n = 1, size = '256x256') => {\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: `Bearer ${API_KEY}`,\r\n  }\r\n\r\n  axios.post(\r\n    \"https://api.openai.com/v1/images/generations\",\r\n    {\r\n      prompt: prompt,\r\n      n: n,\r\n      size: size\r\n    }, { headers, timeout: 10000 }\r\n  ).then(response => {\r\n    console.log(response)\r\n    onMessage(response.data.data)\r\n  }).catch(console.log)\r\n}\r\n\r\n\r\nexport { chat, chatHistory, dalle }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}