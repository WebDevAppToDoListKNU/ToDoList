{"ast":null,"code":"var _jsxFileName = \"/Users/ldy/Code/React/\\u110B\\u1170\\u11B8\\u1100\\u1162\\u1107\\u1161\\u11AF\\u110B\\u1173\\u11BC\\u110B\\u116D\\u11BC/week15/TodoGPT/src/components/MainLayout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Editor from \"./Editor\";\nimport { fetchUserData, updateUserFavorites, updateTodos, addNewFolder, deleteFolderData } from \"./APIUtils\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainLayout = () => {\n  _s();\n  const navigate = useNavigate();\n  const [logInUser, setLogInUser] = useState(null);\n  const [todos, setTodos] = useState({});\n  const [folders, setFolders] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n  const [selectedFolder, setSelectedFolder] = useState(1);\n  const [editorOpen, setEditorOpen] = useState(false);\n  const [edit, setEdit] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [newFolderName, setNewFolderName] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"latest\");\n  const [filterDate, setFilterDate] = useState(\"\");\n  const TRASH_FOLDER_ID = 1;\n  useEffect(() => {\n    const userId = sessionStorage.getItem(\"logInUserId\");\n    if (userId) {\n      fetchUserData(userId).then(data => {\n        setLogInUser(data);\n        setTodos(data.todos || {});\n        setFolders(data.folders || []);\n        setFavorites(data.favorites || []);\n      }).catch(error => console.error(\"Error fetching user data:\", error));\n    }\n  }, []);\n  const onLogout = () => {\n    sessionStorage.removeItem(\"logInUserId\");\n    setLogInUser(null);\n    navigate(\"/\");\n  };\n  const onAddOrUpdate = newTodo => {\n    if (!title.trim() || !content.trim()) {\n      alert(\"제목과 내용을 입력하세요!\");\n      return;\n    }\n    const userId = logInUser.id;\n    const updatedTodos = updateTodos(todos, selectedFolder, edit, newTodo || {\n      title,\n      content,\n      date: new Date().toISOString()\n    });\n    setTodos(updatedTodos);\n    axios.patch(`http://localhost:8000/users/${userId}`, {\n      todos: updatedTodos\n    }).then(() => console.log(\"Todo updated\")).catch(error => console.error(\"Error updating todo:\", error));\n    closeEditor();\n  };\n  const toggleFavorite = (todoId, folderId) => {\n    const isFavorite = favorites.some(item => item.todoId === todoId && item.folderId === folderId);\n    const updatedFavorites = isFavorite ? favorites.filter(item => item.todoId !== todoId || item.folderId !== folderId) : [...favorites, {\n      todoId,\n      folderId\n    }];\n    setFavorites(updatedFavorites);\n    updateUserFavorites(logInUser.id, updatedFavorites);\n  };\n  const addFolder = () => {\n    if (!newFolderName.trim()) return;\n    const updatedFolders = addNewFolder(folders, newFolderName);\n    setFolders(updatedFolders);\n    setNewFolderName(\"\");\n    axios.patch(`http://localhost:8000/users/${logInUser.id}`, {\n      folders: updatedFolders\n    }).then(() => console.log(\"Folder added\")).catch(error => console.error(\"Error adding folder:\", error));\n  };\n  const onDeleteFolder = folderId => {\n    if (folderId === TRASH_FOLDER_ID) {\n      alert(\"휴지통 폴더는 삭제할 수 없습니다.\");\n      return;\n    }\n    const {\n      updatedFolders,\n      updatedTodos\n    } = deleteFolderData(folders, todos, folderId);\n    setFolders(updatedFolders);\n    setTodos(updatedTodos);\n    axios.patch(`http://localhost:8000/users/${logInUser.id}`, {\n      folders: updatedFolders,\n      todos: updatedTodos\n    }).then(() => console.log(\"Folder deleted\")).catch(error => console.error(\"Error deleting folder:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      style: {\n        width: \"250px\",\n        borderRight: \"2px solid #ccc\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ToDoList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), logInUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC548\\uB155\\uD558\\uC138\\uC694, \", logInUser.userId, \"\\uB2D8!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onLogout,\n          children: \"\\uB85C\\uADF8\\uC544\\uC6C3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(\"/login\"),\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: folders.map(folder => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: folder.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this)\n        }, folder.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newFolderName,\n        onChange: e => setNewFolderName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addFolder,\n        children: \"\\uD3F4\\uB354 \\uCD94\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        editorOpen: editorOpen,\n        closeEditor: () => setEditorOpen(false),\n        title: title,\n        setTitle: setTitle,\n        content: content,\n        setContent: setContent,\n        onAddOrUpdate: onAddOrUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n_s(MainLayout, \"kqmV1mya9Wl3c4YK7SMhqZoolwo=\", false, function () {\n  return [useNavigate];\n});\n_c = MainLayout;\nexport default MainLayout;\nvar _c;\n$RefreshReg$(_c, \"MainLayout\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Editor","fetchUserData","updateUserFavorites","updateTodos","addNewFolder","deleteFolderData","jsxDEV","_jsxDEV","Fragment","_Fragment","MainLayout","_s","navigate","logInUser","setLogInUser","todos","setTodos","folders","setFolders","favorites","setFavorites","selectedFolder","setSelectedFolder","editorOpen","setEditorOpen","edit","setEdit","title","setTitle","content","setContent","newFolderName","setNewFolderName","query","setQuery","sortOrder","setSortOrder","filterDate","setFilterDate","TRASH_FOLDER_ID","userId","sessionStorage","getItem","then","data","catch","error","console","onLogout","removeItem","onAddOrUpdate","newTodo","trim","alert","id","updatedTodos","date","Date","toISOString","patch","log","closeEditor","toggleFavorite","todoId","folderId","isFavorite","some","item","updatedFavorites","filter","addFolder","updatedFolders","onDeleteFolder","style","display","height","children","width","borderRight","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","folder","name","type","value","onChange","e","target","flex","_c","$RefreshReg$"],"sources":["/Users/ldy/Code/React/웹개발응용/week15/TodoGPT/src/components/MainLayout.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Editor from \"./Editor\";\nimport {\n    fetchUserData,\n    updateUserFavorites,\n    updateTodos,\n    addNewFolder,\n    deleteFolderData,\n} from \"./APIUtils\";\n\nconst MainLayout = () => {\n    const navigate = useNavigate();\n    const [logInUser, setLogInUser] = useState(null);\n    const [todos, setTodos] = useState({});\n    const [folders, setFolders] = useState([]);\n    const [favorites, setFavorites] = useState([]);\n    const [selectedFolder, setSelectedFolder] = useState(1);\n    const [editorOpen, setEditorOpen] = useState(false);\n    const [edit, setEdit] = useState(null);\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [newFolderName, setNewFolderName] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const [sortOrder, setSortOrder] = useState(\"latest\");\n    const [filterDate, setFilterDate] = useState(\"\");\n\n    const TRASH_FOLDER_ID = 1;\n\n    useEffect(() => {\n        const userId = sessionStorage.getItem(\"logInUserId\");\n        if (userId) {\n            fetchUserData(userId)\n                .then((data) => {\n                    setLogInUser(data);\n                    setTodos(data.todos || {});\n                    setFolders(data.folders || []);\n                    setFavorites(data.favorites || []);\n                })\n                .catch((error) => console.error(\"Error fetching user data:\", error));\n        }\n    }, []);\n\n    const onLogout = () => {\n        sessionStorage.removeItem(\"logInUserId\");\n        setLogInUser(null);\n        navigate(\"/\");\n    };\n\n    const onAddOrUpdate = (newTodo) => {\n        if (!title.trim() || !content.trim()) {\n            alert(\"제목과 내용을 입력하세요!\");\n            return;\n        }\n\n        const userId = logInUser.id;\n        const updatedTodos = updateTodos(\n            todos,\n            selectedFolder,\n            edit,\n            newTodo || { title, content, date: new Date().toISOString() }\n        );\n        setTodos(updatedTodos);\n\n        axios\n            .patch(`http://localhost:8000/users/${userId}`, { todos: updatedTodos })\n            .then(() => console.log(\"Todo updated\"))\n            .catch((error) => console.error(\"Error updating todo:\", error));\n        closeEditor();\n    };\n\n    const toggleFavorite = (todoId, folderId) => {\n        const isFavorite = favorites.some(\n            (item) => item.todoId === todoId && item.folderId === folderId\n        );\n\n        const updatedFavorites = isFavorite\n            ? favorites.filter(\n                (item) => item.todoId !== todoId || item.folderId !== folderId\n            )\n            : [...favorites, { todoId, folderId }];\n\n        setFavorites(updatedFavorites);\n        updateUserFavorites(logInUser.id, updatedFavorites);\n    };\n\n    const addFolder = () => {\n        if (!newFolderName.trim()) return;\n\n        const updatedFolders = addNewFolder(folders, newFolderName);\n        setFolders(updatedFolders);\n        setNewFolderName(\"\");\n\n        axios\n            .patch(`http://localhost:8000/users/${logInUser.id}`, { folders: updatedFolders })\n            .then(() => console.log(\"Folder added\"))\n            .catch((error) => console.error(\"Error adding folder:\", error));\n    };\n\n    const onDeleteFolder = (folderId) => {\n        if (folderId === TRASH_FOLDER_ID) {\n            alert(\"휴지통 폴더는 삭제할 수 없습니다.\");\n            return;\n        }\n        const { updatedFolders, updatedTodos } = deleteFolderData(\n            folders,\n            todos,\n            folderId\n        );\n        setFolders(updatedFolders);\n        setTodos(updatedTodos);\n\n        axios\n            .patch(`http://localhost:8000/users/${logInUser.id}`, {\n                folders: updatedFolders,\n                todos: updatedTodos,\n            })\n            .then(() => console.log(\"Folder deleted\"))\n            .catch((error) => console.error(\"Error deleting folder:\", error));\n    };\n\n    return (\n        <div style={{ display: \"flex\", height: \"100vh\" }}>\n            <aside style={{ width: \"250px\", borderRight: \"2px solid #ccc\" }}>\n                <h2>ToDoList</h2>\n                {logInUser ? (\n                    <>\n                        <p>안녕하세요, {logInUser.userId}님!</p>\n                        <button onClick={onLogout}>로그아웃</button>\n                    </>\n                ) : (\n                    <button onClick={() => navigate(\"/login\")}>로그인</button>\n                )}\n                <ul>\n                    {folders.map((folder) => (\n                        <li key={folder.id}>\n                            <span>{folder.name}</span>\n                        </li>\n                    ))}\n                </ul>\n                <input\n                    type=\"text\"\n                    value={newFolderName}\n                    onChange={(e) => setNewFolderName(e.target.value)}\n                />\n                <button onClick={addFolder}>폴더 추가</button>\n            </aside>\n            <main style={{ flex: 1 }}>\n                <Editor\n                    editorOpen={editorOpen}\n                    closeEditor={() => setEditorOpen(false)}\n                    title={title}\n                    setTitle={setTitle}\n                    content={content}\n                    setContent={setContent}\n                    onAddOrUpdate={onAddOrUpdate}\n                />\n            </main>\n        </div>\n    );\n};\n\nexport default MainLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}