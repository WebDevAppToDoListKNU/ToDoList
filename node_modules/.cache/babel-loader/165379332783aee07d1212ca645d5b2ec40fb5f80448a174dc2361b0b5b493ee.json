{"ast":null,"code":"var _jsxFileName = \"/Users/ldy/Code/React/\\u110B\\u1170\\u11B8\\u1100\\u1162\\u1107\\u1161\\u11AF\\u110B\\u1173\\u11BC\\u110B\\u116D\\u11BC/week15/TodoList/src/components/CombinedTodolist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { chat } from \"./openai\"; // OpenAI API를 호출하는 chat 함수 필요\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todolist() {\n  _s();\n  var _folders$find2;\n  const [folders, setFolders] = useState([{\n    id: 1,\n    name: \"개인\"\n  }, {\n    id: 2,\n    name: \"업무\"\n  }]);\n  const [todos, setTodos] = useState({\n    1: [{\n      id: 1,\n      title: \"운동하기\",\n      content: \"매일 아침 30분 운동\",\n      check: false\n    }, {\n      id: 2,\n      title: \"책 읽기\",\n      content: \"소설 한 권 읽기\",\n      check: true\n    }],\n    2: [{\n      id: 1,\n      title: \"프로젝트 보고서 작성\",\n      content: \"최종 보고서 작성 및 검토\",\n      check: false\n    }, {\n      id: 2,\n      title: \"팀 회의 준비\",\n      content: \"발표 자료 준비 및 회의록 작성\",\n      check: true\n    }]\n  });\n  const [selectedFolder, setSelectedFolder] = useState(1);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingTodo, setEditingTodo] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [processingGPT, setProcessingGPT] = useState(false);\n  const openModal = (todo = null) => {\n    setIsModalOpen(true);\n    if (todo) {\n      setEditingTodo(todo);\n      setTitle(todo.title);\n      setContent(todo.content);\n    } else {\n      setEditingTodo(null);\n      setTitle(\"\");\n      setContent(\"\");\n    }\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setEditingTodo(null);\n    setTitle(\"\");\n    setContent(\"\");\n  };\n  const handleGPTSummary = () => {\n    var _folders$find;\n    if (todos[selectedFolder].length === 0) {\n      alert(\"현재 폴더에 ToDo 항목이 없습니다.\");\n      return;\n    }\n    const prompt = `다음은 사용자의 TodoList입니다. 항목을 간결하게 요약하고 가독성 있게 정리해주세요:\n폴더: ${(_folders$find = folders.find(folder => folder.id === selectedFolder)) === null || _folders$find === void 0 ? void 0 : _folders$find.name}\nToDo 목록:\n${todos[selectedFolder].map(todo => `- ${todo.title}: ${todo.content}`).join(\"\\n\")}`;\n    setProcessingGPT(true);\n    chat(prompt, response => {\n      const updatedTodos = response.split(\"\\n\").map((line, idx) => {\n        const [newTitle, ...rest] = line.replace(\"- \", \"\").split(\": \");\n        return {\n          id: idx + 1,\n          title: newTitle,\n          content: rest.join(\": \").trim(),\n          check: false\n        };\n      });\n      setTodos({\n        ...todos,\n        [selectedFolder]: updatedTodos\n      });\n      setProcessingGPT(false);\n      closeModal();\n    });\n  };\n  const filteredTodos = (todos[selectedFolder] || []).filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()) || todo.content.toLowerCase().includes(query.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"300px\",\n        borderRight: \"2px solid #ccc\",\n        padding: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ToDoList\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: folders.map(folder => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            padding: 10,\n            backgroundColor: selectedFolder === folder.id ? \"#ddd\" : \"transparent\",\n            cursor: \"pointer\"\n          },\n          onClick: () => setSelectedFolder(folder.id),\n          children: folder.name\n        }, folder.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        padding: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [(_folders$find2 = folders.find(folder => folder.id === selectedFolder)) === null || _folders$find2 === void 0 ? void 0 : _folders$find2.name, \" To-Do List\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"\\uAC80\\uC0C9 (\\uC81C\\uBAA9/\\uB0B4\\uC6A9)\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        style: {\n          width: \"100%\",\n          padding: 10,\n          marginBottom: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(auto-fill, minmax(250px, 1fr))\",\n          gap: 20\n        },\n        children: filteredTodos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            border: \"1px solid #ccc\",\n            borderRadius: 10,\n            padding: 10,\n            backgroundColor: \"white\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              textDecoration: todo.check ? \"line-through\" : \"none\"\n            },\n            children: todo.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: todo.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 29\n          }, this)]\n        }, todo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGPTSummary,\n        style: {\n          width: \"100%\",\n          padding: 10,\n          marginTop: 20,\n          backgroundColor: \"#4caf50\",\n          color: \"white\",\n          fontSize: 16,\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        disabled: processingGPT,\n        children: processingGPT ? \"GPT 처리 중...\" : \"GPT 내용 요약\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(Todolist, \"W2un6AT3u27IzBwAR3jukyQqM/g=\");\n_c = Todolist;\nexport default Todolist;\nvar _c;\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useState","chat","jsxDEV","_jsxDEV","Todolist","_s","_folders$find2","folders","setFolders","id","name","todos","setTodos","title","content","check","selectedFolder","setSelectedFolder","isModalOpen","setIsModalOpen","editingTodo","setEditingTodo","setTitle","setContent","query","setQuery","processingGPT","setProcessingGPT","openModal","todo","closeModal","handleGPTSummary","_folders$find","length","alert","prompt","find","folder","map","join","response","updatedTodos","split","line","idx","newTitle","rest","replace","trim","filteredTodos","filter","toLowerCase","includes","style","display","height","children","width","borderRight","padding","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","cursor","onClick","flex","type","placeholder","value","onChange","e","target","marginBottom","gridTemplateColumns","gap","border","borderRadius","textDecoration","marginTop","color","fontSize","disabled","_c","$RefreshReg$"],"sources":["/Users/ldy/Code/React/웹개발응용/week15/TodoList/src/components/CombinedTodolist.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { chat } from \"./openai\"; // OpenAI API를 호출하는 chat 함수 필요\n\nfunction Todolist() {\n    const [folders, setFolders] = useState([\n        { id: 1, name: \"개인\" },\n        { id: 2, name: \"업무\" },\n    ]);\n    const [todos, setTodos] = useState({\n        1: [\n            { id: 1, title: \"운동하기\", content: \"매일 아침 30분 운동\", check: false },\n            { id: 2, title: \"책 읽기\", content: \"소설 한 권 읽기\", check: true },\n        ],\n        2: [\n            { id: 1, title: \"프로젝트 보고서 작성\", content: \"최종 보고서 작성 및 검토\", check: false },\n            { id: 2, title: \"팀 회의 준비\", content: \"발표 자료 준비 및 회의록 작성\", check: true },\n        ],\n    });\n    const [selectedFolder, setSelectedFolder] = useState(1);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [editingTodo, setEditingTodo] = useState(null);\n    const [title, setTitle] = useState(\"\");\n    const [content, setContent] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const [processingGPT, setProcessingGPT] = useState(false);\n\n    const openModal = (todo = null) => {\n        setIsModalOpen(true);\n        if (todo) {\n            setEditingTodo(todo);\n            setTitle(todo.title);\n            setContent(todo.content);\n        } else {\n            setEditingTodo(null);\n            setTitle(\"\");\n            setContent(\"\");\n        }\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setEditingTodo(null);\n        setTitle(\"\");\n        setContent(\"\");\n    };\n\n    const handleGPTSummary = () => {\n        if (todos[selectedFolder].length === 0) {\n            alert(\"현재 폴더에 ToDo 항목이 없습니다.\");\n            return;\n        }\n\n        const prompt = `다음은 사용자의 TodoList입니다. 항목을 간결하게 요약하고 가독성 있게 정리해주세요:\n폴더: ${folders.find((folder) => folder.id === selectedFolder)?.name}\nToDo 목록:\n${todos[selectedFolder]\n                .map((todo) => `- ${todo.title}: ${todo.content}`)\n                .join(\"\\n\")}`;\n\n        setProcessingGPT(true);\n\n        chat(prompt, (response) => {\n            const updatedTodos = response.split(\"\\n\").map((line, idx) => {\n                const [newTitle, ...rest] = line.replace(\"- \", \"\").split(\": \");\n                return {\n                    id: idx + 1,\n                    title: newTitle,\n                    content: rest.join(\": \").trim(),\n                    check: false,\n                };\n            });\n\n            setTodos({ ...todos, [selectedFolder]: updatedTodos });\n            setProcessingGPT(false);\n            closeModal();\n        });\n    };\n\n    const filteredTodos = (todos[selectedFolder] || []).filter(\n        (todo) =>\n            todo.title.toLowerCase().includes(query.toLowerCase()) ||\n            todo.content.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return (\n        <div style={{ display: \"flex\", height: \"100vh\" }}>\n            {/* 폴더 리스트 */}\n            <div style={{ width: \"300px\", borderRight: \"2px solid #ccc\", padding: 10 }}>\n                <h2>ToDoList</h2>\n                <ul>\n                    {folders.map((folder) => (\n                        <li\n                            key={folder.id}\n                            style={{\n                                padding: 10,\n                                backgroundColor: selectedFolder === folder.id ? \"#ddd\" : \"transparent\",\n                                cursor: \"pointer\",\n                            }}\n                            onClick={() => setSelectedFolder(folder.id)}\n                        >\n                            {folder.name}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {/* 메모 영역 */}\n            <div style={{ flex: 1, padding: 20 }}>\n                <h2>{folders.find((folder) => folder.id === selectedFolder)?.name} To-Do List</h2>\n                <input\n                    type=\"text\"\n                    placeholder=\"검색 (제목/내용)\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    style={{ width: \"100%\", padding: 10, marginBottom: 20 }}\n                />\n                <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(auto-fill, minmax(250px, 1fr))\", gap: 20 }}>\n                    {filteredTodos.map((todo) => (\n                        <div\n                            key={todo.id}\n                            style={{\n                                border: \"1px solid #ccc\",\n                                borderRadius: 10,\n                                padding: 10,\n                                backgroundColor: \"white\",\n                            }}\n                        >\n                            <h3 style={{ textDecoration: todo.check ? \"line-through\" : \"none\" }}>{todo.title}</h3>\n                            <p>{todo.content}</p>\n                        </div>\n                    ))}\n                </div>\n                <button\n                    onClick={handleGPTSummary}\n                    style={{\n                        width: \"100%\",\n                        padding: 10,\n                        marginTop: 20,\n                        backgroundColor: \"#4caf50\",\n                        color: \"white\",\n                        fontSize: 16,\n                        border: \"none\",\n                        cursor: \"pointer\",\n                    }}\n                    disabled={processingGPT}\n                >\n                    {processingGPT ? \"GPT 처리 중...\" : \"GPT 내용 요약\"}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Todolist;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}