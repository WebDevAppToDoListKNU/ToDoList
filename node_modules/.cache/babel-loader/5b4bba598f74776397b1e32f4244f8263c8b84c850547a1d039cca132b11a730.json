{"ast":null,"code":"import axios from \"axios\";\nexport const fetchUserData = userId => axios.get(`http://localhost:8000/users/${userId}`).then(res => res.data);\nexport const updateUserFavorites = (userId, favorites) => axios.patch(`http://localhost:8000/users/${userId}`, {\n  favorites\n});\nexport const updateTodos = (todos, folderId, edit, newTodo) => {\n  const folderTodos = todos[folderId] || [];\n  return {\n    ...todos,\n    [folderId]: edit ? folderTodos.map(todo => todo.id === edit.id ? {\n      ...todo,\n      ...newTodo\n    } : todo) : [...folderTodos, newTodo]\n  };\n};\nexport const addNewFolder = (folders, folderName) => {\n  const id = folders.length > 0 ? folders[folders.length - 1].id + 1 : 1;\n  return [...folders, {\n    id,\n    name: folderName\n  }];\n};\nexport const deleteFolderData = (folders, todos, folderId) => {\n  const updatedFolders = folders.filter(folder => folder.id !== folderId);\n  const updatedTodos = {\n    ...todos\n  };\n  delete updatedTodos[folderId];\n  return {\n    updatedFolders,\n    updatedTodos\n  };\n};","map":{"version":3,"names":["axios","fetchUserData","userId","get","then","res","data","updateUserFavorites","favorites","patch","updateTodos","todos","folderId","edit","newTodo","folderTodos","map","todo","id","addNewFolder","folders","folderName","length","name","deleteFolderData","updatedFolders","filter","folder","updatedTodos"],"sources":["/Users/ldy/Code/React/웹개발응용/week15/TodoGPT/src/components/APIUtils.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const fetchUserData = (userId) =>\n    axios.get(`http://localhost:8000/users/${userId}`).then((res) => res.data);\n\nexport const updateUserFavorites = (userId, favorites) =>\n    axios.patch(`http://localhost:8000/users/${userId}`, { favorites });\n\nexport const updateTodos = (todos, folderId, edit, newTodo) => {\n    const folderTodos = todos[folderId] || [];\n    return {\n        ...todos,\n        [folderId]: edit\n            ? folderTodos.map((todo) =>\n                todo.id === edit.id ? { ...todo, ...newTodo } : todo\n            )\n            : [...folderTodos, newTodo],\n    };\n};\n\nexport const addNewFolder = (folders, folderName) => {\n    const id = folders.length > 0 ? folders[folders.length - 1].id + 1 : 1;\n    return [...folders, { id, name: folderName }];\n};\n\nexport const deleteFolderData = (folders, todos, folderId) => {\n    const updatedFolders = folders.filter((folder) => folder.id !== folderId);\n    const updatedTodos = { ...todos };\n    delete updatedTodos[folderId];\n    return { updatedFolders, updatedTodos };\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,aAAa,GAAIC,MAAM,IAChCF,KAAK,CAACG,GAAG,CAAC,+BAA+BD,MAAM,EAAE,CAAC,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC;AAE9E,OAAO,MAAMC,mBAAmB,GAAGA,CAACL,MAAM,EAAEM,SAAS,KACjDR,KAAK,CAACS,KAAK,CAAC,+BAA+BP,MAAM,EAAE,EAAE;EAAEM;AAAU,CAAC,CAAC;AAEvE,OAAO,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,KAAK;EAC3D,MAAMC,WAAW,GAAGJ,KAAK,CAACC,QAAQ,CAAC,IAAI,EAAE;EACzC,OAAO;IACH,GAAGD,KAAK;IACR,CAACC,QAAQ,GAAGC,IAAI,GACVE,WAAW,CAACC,GAAG,CAAEC,IAAI,IACnBA,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACK,EAAE,GAAG;MAAE,GAAGD,IAAI;MAAE,GAAGH;IAAQ,CAAC,GAAGG,IACpD,CAAC,GACC,CAAC,GAAGF,WAAW,EAAED,OAAO;EAClC,CAAC;AACL,CAAC;AAED,OAAO,MAAMK,YAAY,GAAGA,CAACC,OAAO,EAAEC,UAAU,KAAK;EACjD,MAAMH,EAAE,GAAGE,OAAO,CAACE,MAAM,GAAG,CAAC,GAAGF,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,CAACJ,EAAE,GAAG,CAAC,GAAG,CAAC;EACtE,OAAO,CAAC,GAAGE,OAAO,EAAE;IAAEF,EAAE;IAAEK,IAAI,EAAEF;EAAW,CAAC,CAAC;AACjD,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAGA,CAACJ,OAAO,EAAET,KAAK,EAAEC,QAAQ,KAAK;EAC1D,MAAMa,cAAc,GAAGL,OAAO,CAACM,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACT,EAAE,KAAKN,QAAQ,CAAC;EACzE,MAAMgB,YAAY,GAAG;IAAE,GAAGjB;EAAM,CAAC;EACjC,OAAOiB,YAAY,CAAChB,QAAQ,CAAC;EAC7B,OAAO;IAAEa,cAAc;IAAEG;EAAa,CAAC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}